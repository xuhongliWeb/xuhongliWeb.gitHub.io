<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Promise</title>
      <link href="2020/12/20/Promise/"/>
      <url>2020/12/20/Promise/</url>
      
        <content type="html"><![CDATA[<h2 id="Promise-是什么？"><a href="#Promise-是什么？" class="headerlink" title="Promise 是什么？"></a>Promise 是什么？</h2><p>Promise 是异步编程的一种解决方案，比传统的方案一一回调更合理更强大。 </p><p>所谓Promise ,简单来说。里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果从语法上说 。 Promise 是一个对象， 从它可以获取异步操作的消息。Promise提供的API，各种异步操作都可以用通用的方法处理 。</p><p>Promise 对象有两个特点</p><ul><li>对象的状态不受外界影响Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态</li><li>一旦状态改变。就不会在变</li></ul><p>Promise也有一些缺点。首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。第三，当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li><p>promise.prototype.then()</p></li><li><p>Promise.prototype.catch()<br>promise.prototype.then(res,catch) 的第二个参数也能捕捉到错误，一般不推荐</p></li><li><p>Promise.prototype.finally()<br>finally方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是fulfilled还是rejected</p></li><li><p>Promise.all()<br>Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。<br>只有所有all里面包含的promise状态为fulfilled 整体才会返回fulfilled, 同样一个错误整体就返回rejected了</p></li><li><p>promise.race()<br>Promise.race()方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const p = Promise.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>上述代码 p1,p2,p3 只要有一个实列率先改变， p的状态就跟着改变。 那个率先改变的promise返回值就传递给离p的回调函数 </p></li><li><p>const p = Promise.race([p1, p2, p3]);<br>Promise.allSettled()方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例。只有等到所有这些参数实例都返回结果，不管是fulfilled还是rejected，包装实例才会结束。该方法由 ES2020 引入。</p></li><li><p>Promise.resolve()<br>有时需要将现有对象转为 Promise 对象，Promise.resolve()方法就起到这个作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve(&apos;foo&apos;)</span><br><span class="line">// 等价于</span><br><span class="line">new Promise(resolve =&gt; resolve(&apos;foo&apos;))</span><br></pre></td></tr></table></figure></li><li><p>Promise.reject()<br>Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected。</p></li></ul><h2 id="手写基本Promise"><a href="#手写基本Promise" class="headerlink" title="手写基本Promise"></a>手写基本Promise</h2><p>这一版本 支持 </p><ul><li>异步任务</li><li>then</li><li>catch<br>简版 Promise</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description </span><br><span class="line"> * executor - 传进来的一堆 用户写的方法</span><br><span class="line"> * promise 对象初始状态为peading, 在被resolve或 reject 是 状态改为 Fulfilled 或 Rejected</span><br><span class="line"> * resolve 接收成功的数据， reject 接收失败或错误的数据</span><br><span class="line"> * Promise对象必须有一个then方法， 且只接收两个可函数参数 onFulfilled / onRejected</span><br><span class="line"> * 发布订阅模式支持异步</span><br><span class="line"> * catch方法其实就是没有成功回调的then方法，这个很好理解，因为一旦失败之后就会调用reject,最终都会走到then方法的失败回调中，只是简单的把then方法换个名字而已。</span><br><span class="line"> */</span><br><span class="line"> const pConfig = &#123;</span><br><span class="line">   PEADINGD : &apos;PEADINGD&apos;, </span><br><span class="line">   RESOLVED: &apos;RESOLVED&apos;,</span><br><span class="line">   REJECTED: &apos;RESOLVED&apos;</span><br><span class="line"> &#125;</span><br><span class="line"> export class vxPromise &#123;</span><br><span class="line">   constructor(executor) &#123;</span><br><span class="line">    console.log(executor, &apos;执行者 executor -1 &apos;)</span><br><span class="line"></span><br><span class="line">    this.status = pConfig.PEADINGD // 默认等待状态</span><br><span class="line">    this.value = undefined // 这个应该是 成功的结果把？</span><br><span class="line">    this.reason = undefined // 失败的结果？</span><br><span class="line">    this.onResolvedCallbacks = [] // 存放 成功函数的</span><br><span class="line">    this.onRejectedCallbacks = [] // 存放失败函数的</span><br><span class="line">    let resolve = (value) =&gt; &#123;</span><br><span class="line">      console.log(value, &apos;resolve-value -4&apos;)</span><br><span class="line">      if(this.status === pConfig.PEADINGD) &#123; // 等待状态才执行</span><br><span class="line">        this.value = value </span><br><span class="line">        this.status = pConfig.RESOLVED</span><br><span class="line">        // 依次执行异步任务 由 then 的时候push 进去</span><br><span class="line">        this.onResolvedCallbacks.forEach(fn =&gt; &#123;</span><br><span class="line">          console.log(fn,&apos;回调里的&apos;, &apos;成功&apos;)</span><br><span class="line">          // fn()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    let reject = (value) =&gt; &#123;</span><br><span class="line">      console.log(value, &apos;reject-value-4&apos;)</span><br><span class="line">      if(this.status === pConfig.PEADINGD) &#123;</span><br><span class="line">        this.reason = value // 更新状态</span><br><span class="line">        this.status = pConfig.REJECTED</span><br><span class="line">        // 依次执行异步任务 由 then 的时候push 进去</span><br><span class="line">        this.onRejectedCallbacks.forEach(fn =&gt; &#123;</span><br><span class="line">          console.log(fn,&apos;回调里的&apos;, &apos;失败&apos;)</span><br><span class="line">          // fn()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 执行 executor 传入我们定义的成功和失败的函数； 把用户写的resolve,reject的结果 传入 内部  resolve 和 reject </span><br><span class="line">    try &#123;</span><br><span class="line">      executor(resolve,reject)</span><br><span class="line">    &#125;catch (e) &#123;</span><br><span class="line">      console.log(&apos;catch错误&apos;, e);</span><br><span class="line">reject(e); //如果内部出错 直接将error手动调用reject向下传递</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   then(onfufilled,onrejected) &#123;</span><br><span class="line">     console.log( this.onResolvedCallbacks, &apos;onrejected-2&apos;)</span><br><span class="line">    if(this.status === pConfig.RESOLVED) &#123;</span><br><span class="line">      onfufilled(this.value)</span><br><span class="line">    &#125;</span><br><span class="line">    if(this.status === pConfig.REJECTED) &#123;</span><br><span class="line">      onrejected(this.reason)</span><br><span class="line">    &#125;</span><br><span class="line">    // 执行异步任务</span><br><span class="line">    if(this.status === pConfig.PEADINGD) &#123;</span><br><span class="line">      console.log(&apos;push-3&apos;)</span><br><span class="line">      this.onResolvedCallbacks.push(() =&gt; &#123;</span><br><span class="line">        console.log(&apos;55&apos;)</span><br><span class="line">        onfufilled(this.value);</span><br><span class="line">      &#125;)</span><br><span class="line">      this.onRejectedCallbacks.push(() =&gt; &#123;</span><br><span class="line">        console.log(&apos;55&apos;)</span><br><span class="line">onrejected(this.reason);</span><br><span class="line">&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  catch(errCallback) &#123; </span><br><span class="line">    return this.then(null, errCallback);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>完整版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">function resolvePromise(promise2, x, resolve, reject) &#123;</span><br><span class="line">// 1)不能引用同一个对象 可能会造成死循环</span><br><span class="line">if (promise2 === x) &#123;</span><br><span class="line">return reject(new TypeError(&apos;[TypeError: Chaining cycle detected for promise #&lt;Promise&gt;]----&apos;));</span><br><span class="line">&#125;</span><br><span class="line">let called;// promise的实现可能有多个，但都要遵循promise a+规范，我们自己写的这个promise用不上called,但是为了遵循规范才加上这个控制的，因为别人写的promise可能会有多次调用的情况。</span><br><span class="line">// 2)判断x的类型，如果x是对象或者函数，说明x有可能是一个promise，否则就不可能是promise</span><br><span class="line">if((typeof x === &apos;object&apos; &amp;&amp; x != null) || typeof x === &apos;function&apos;) &#123;</span><br><span class="line">// 有可能是promise promise要有then方法</span><br><span class="line">try &#123;</span><br><span class="line">// 因为then方法有可能是getter来定义的, 取then时有风险，所以要放在try...catch...中</span><br><span class="line">// 别人写的promise可能是这样的</span><br><span class="line">// Object.defineProperty(promise, &apos;then&apos;, &#123;</span><br><span class="line">// get() &#123;</span><br><span class="line">// throw new Error();</span><br><span class="line">// &#125;</span><br><span class="line">// &#125;)</span><br><span class="line">let then = x.then; </span><br><span class="line">if (typeof then === &apos;function&apos;) &#123; // 只能认为他是promise了</span><br><span class="line">// x.then(()=&gt;&#123;&#125;, ()=&gt;&#123;&#125;); 不要这么写，以防以下写法造成报错， 而且也可以防止多次取值</span><br><span class="line">// let obj = &#123;</span><br><span class="line">// a: 1,</span><br><span class="line">// get then() &#123;</span><br><span class="line">// if (this.a++ == 2) &#123;</span><br><span class="line">// throw new Error();</span><br><span class="line">// &#125;</span><br><span class="line">// console.log(1);</span><br><span class="line">// &#125;</span><br><span class="line">// &#125;</span><br><span class="line">// obj.then;</span><br><span class="line">// obj.then</span><br><span class="line"></span><br><span class="line">// 如果x是一个promise那么在new的时候executor就立即执行了，就会执行他的resolve，那么数据就会传递到他的then中</span><br><span class="line">then.call(x, y =&gt; &#123;// 当前promise解析出来的结果可能还是一个promise, 直到解析到他是一个普通值</span><br><span class="line">if (called) return;</span><br><span class="line">called = true;</span><br><span class="line">resolvePromise(promise2, y, resolve, reject);// resolve, reject都是promise2的</span><br><span class="line">&#125;, r =&gt; &#123;</span><br><span class="line">if (called) return;</span><br><span class="line">called = true;</span><br><span class="line">reject(r);</span><br><span class="line">&#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">// &#123;a: 1, then: 1&#125; </span><br><span class="line">resolve(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch(e) &#123;// 取then出错了 有可能在错误中又调用了该promise的成功或则失败</span><br><span class="line">if (called) return;</span><br><span class="line">called = true;</span><br><span class="line">reject(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">resolve(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要就是多了resolvePromise这么一个函数，用来递归处理then内部回调函数执行后的结果，它有4个参数：</p><p>promise2: 就是新生成的promise，这里至于为什么要把promise2传过来后面会介绍。<br>x: 我们要处理的目标<br>resolve: promise2的resolve, 执行之后promise2的状态就变为成功了，就可以在它的then方法的成功回调中拿到最终结果。<br>reject: promise2的reject, 执行之后promise2的状态就变为失败，在它的then方法的失败回调中拿到失败原因。</p><h1 id="Promise的then的第二个参数和catch的区别"><a href="#Promise的then的第二个参数和catch的区别" class="headerlink" title="Promise的then的第二个参数和catch的区别"></a>Promise的then的第二个参数和catch的区别</h1><ul><li>reject是用来抛出异常的，catch是用来处理异常的；</li><li>reject是Promise的方法，而then和catch是Promise实例的方法（Promise.prototype.then 和 Promise.prototype.catch）。</li></ul><p>区别 </p><p>主要区别就是，如果在then的第一个函数里抛出了异常，后面的catch能捕获到，而then的第二个函数捕获不到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">const promise = new Promise((resolve, rejected) =&gt; &#123;</span><br><span class="line">    throw new Error(&apos;test&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//此时只有then的第二个参数可以捕获到错误信息</span><br><span class="line">promise.then(res =&gt; &#123;</span><br><span class="line">    //</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">&#125;).catch(err1 =&gt; &#123;</span><br><span class="line">    console.log(err1);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//此时catch方法可以捕获到错误信息</span><br><span class="line">promise.then(res =&gt; &#123;</span><br><span class="line">    //</span><br><span class="line">&#125;).catch(err1 =&gt; &#123;</span><br><span class="line">    console.log(err1);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//此时只有then的第二个参数可以捕获到Promise内部抛出的错误信息</span><br><span class="line">promise.then(res =&gt; &#123;</span><br><span class="line">    throw new Error(&apos;hello&apos;);</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">&#125;).catch(err1 =&gt; &#123;</span><br><span class="line">    console.log(err1);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//此时只有then的第二个参数可以捕获到Promise内部抛出的错误信息</span><br><span class="line">promise.then(res =&gt; &#123;</span><br><span class="line">    throw new Error(&apos;hello&apos;);</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//此时catch可以捕获到Promise内部抛出的错误信息</span><br><span class="line">promise.then(res =&gt; &#123;</span><br><span class="line">    throw new Error(&apos;hello&apos;);</span><br><span class="line">&#125;).catch(err1 =&gt; &#123;</span><br><span class="line">    console.log(err1);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>两个方法的比较</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// bad 适用于单个 链式的捕捉不到</span><br><span class="line">promise</span><br><span class="line">  .then(function(data) &#123;</span><br><span class="line">    // success</span><br><span class="line">  &#125;, function(err) &#123;</span><br><span class="line">    // error</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">// good </span><br><span class="line">promise</span><br><span class="line">  .then(function(data) &#123; //cb</span><br><span class="line">    // success</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function(err) &#123;</span><br><span class="line">    // error</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，第二种写法要好于第一种写法，理由是第二种写法可以捕获前面then方法执行中的错误，也更接近同步的写法（try/catch）。因此，建议总是使用catch方法，而不使用then方法的第二个参数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> javascript 中的事件循环 Event Loop</title>
      <link href="2020/07/09/javascript-%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF-Event-Loop/"/>
      <url>2020/07/09/javascript-%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF-Event-Loop/</url>
      
        <content type="html"><![CDATA[<h2 id="javascript-为什么是单线程"><a href="#javascript-为什么是单线程" class="headerlink" title="javascript 为什么是单线程?"></a>javascript 为什么是单线程?</h2><p>单线程也就是同一时间只能做一件事, 这也是js 语言的特点,那么为什么不弄个多线程呢?</p><p>js的单线程与它的用于有关,作为浏览器语言, js,做的是与用户互动,操作DOM,如果是多线程了, 同一时间对一个DOM进行了增加和删除操作,这时候以哪一个为准?</p><p>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质</p><p>可以看下阮一峰老师的博客</p><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>看下面代码<br>这段代码的实现就叫做同步,也就是说按照顺序去做,做完第一件事情之后,再去做第二件事情</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(1)</span><br><span class="line">for(let i = 0; i&lt; 3; i++)&#123;</span><br><span class="line">  console.log(i)</span><br><span class="line">&#125;</span><br><span class="line">console.log(4)</span><br></pre></td></tr></table></figure><h3 id="异步-细分为宏任务和微任务"><a href="#异步-细分为宏任务和微任务" class="headerlink" title="异步 (细分为宏任务和微任务)"></a>异步 (细分为宏任务和微任务)</h3><p>因为js是单线程的, 当任务多的时候就需要排队, 如果前面一个任务耗时很长, 后面一个任务就要一直等待.所以异步就出现了</p><p>宏任务有以下几种：<br>①I/O<br>②setTimeout<br>③setInterval<br>④setImmediate<br>⑤requestAnimationFrame<br>微任务有以下几种：<br>①process.nextTick<br>②MutationObserver<br>③Promise.then catch finally</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;start&apos;) // 同步</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&apos;宏任务&apos;)</span><br><span class="line">&#125;,0)</span><br><span class="line"></span><br><span class="line">new Promise((reslove) =&gt; &#123;</span><br><span class="line">  console.log(&apos;p1&apos;) // prpmise 创建 就会立即执行</span><br><span class="line">  reslove()</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">  console.log(&apos;p2&apos;) // </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">同步 &gt; 微任务 &gt; 宏任务</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;start&apos;) // 同步</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&apos;宏任务&apos;)</span><br><span class="line">&#125;,2220)</span><br><span class="line"></span><br><span class="line">for (let index = 0; index &lt; 22000; index++) &#123;</span><br><span class="line">console.log(&apos;index&apos;)  // setTimeout 的延时时间,取决与同步函数的运行时间, 这里登 延时函数运行的时候会立即输出</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new Promise((reslove) =&gt; &#123;</span><br><span class="line">  console.log(&apos;p1&apos;) // prpmise 创建 就会立即执行</span><br><span class="line">  reslove()</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">  console.log(&apos;then&apos;) // </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个和上面的差不多, 只要理解了一个就面的也就理解了, </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;start&apos;) // 同步</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&apos;宏任务&apos;)</span><br><span class="line">  new Promise((reslove) =&gt; &#123;</span><br><span class="line">    console.log(&apos;setTimeout p1&apos;) // prpmise 创建 就会立即执行</span><br><span class="line">    reslove()</span><br><span class="line">  &#125;).then(res =&gt; &#123;</span><br><span class="line">    console.log(&apos; setTimeout then&apos;) // </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, 2220)</span><br><span class="line"></span><br><span class="line">for (let index = 0; index &lt; 22000; index++) &#123;</span><br><span class="line">  console.log(&apos;index&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new Promise((reslove) =&gt; &#123;</span><br><span class="line">  console.log(&apos;p1&apos;) // prpmise 创建 就会立即执行</span><br><span class="line">  reslove()</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">  console.log(&apos;then&apos;) // </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>记住JS是单线程的, 任务也是一个一个取的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let i = 0</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123; // 扔到任务队列 =&gt; 依次执行 i = 1</span><br><span class="line">  console.log(i++)</span><br><span class="line">&#125;,1000)</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;  // 扔到任务队列 =&gt; 依次执行 i = 2</span><br><span class="line">  console.log(i++)</span><br><span class="line">&#125;,1000)</span><br></pre></td></tr></table></figure><h2 id="任务队列-消息队列"><a href="#任务队列-消息队列" class="headerlink" title="任务队列(消息队列)"></a>任务队列(消息队列)</h2><p>任务队列是一个事件的队列(也可以理解成消息的队列)工作线程完成一项任务，就在”任务队列”中添加一个事件(也可以理解为发送一条消息)，表示相关的异步任务可以进入”执行栈”了。主线程读取”任务队列”，就是读取里面有哪些事件。</p><ul><li>所有同步任务都在主线程上执行，形成一个执行栈</li><li>主线程发起异步请求,相应的工作线程就会去执行异步任务</li></ul><p>主线程可以继续执行后面的代码</p><ul><li>主线程之外，还存在一个”任务队列”（task queue）。只要异步任务</li><li>一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队</li><li>主线程把当前的事件执行完成之后,再去读取任务队列,如此反复重复</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）</p><p>代码从上到下执行, 优先执行同步函数, 在遇到异步函数时将该任务推入执行栈,当任务队列中没有同步任务,便开始从执行栈中取异步函数, 顺序是 微任务 &gt; 宏任务 </p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="2020/07/04/%E9%97%AD%E5%8C%85/"/>
      <url>2020/07/04/%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="闭包是什么？"><a href="#闭包是什么？" class="headerlink" title="闭包是什么？"></a>闭包是什么？</h2><p>  闭包是指有权访问另一个函数作用域的变量的函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数。</p><h2 id="说起闭包就不得不聊聊作用域-闭包与变量对象和作用域链有着比较多的联系"><a href="#说起闭包就不得不聊聊作用域-闭包与变量对象和作用域链有着比较多的联系" class="headerlink" title="说起闭包就不得不聊聊作用域 闭包与变量对象和作用域链有着比较多的联系"></a>说起闭包就不得不聊聊作用域 闭包与变量对象和作用域链有着比较多的联系</h2><h3 id="全局环境只能访问全局中定义的变量和方法-不能直接访问局部环境中的方法和变量"><a href="#全局环境只能访问全局中定义的变量和方法-不能直接访问局部环境中的方法和变量" class="headerlink" title="全局环境只能访问全局中定义的变量和方法, 不能直接访问局部环境中的方法和变量"></a>全局环境只能访问全局中定义的变量和方法, 不能直接访问局部环境中的方法和变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var title = &apos;blog&apos;</span><br><span class="line">function test() &#123;</span><br><span class="line">  console.log(&apos;title&apos;)</span><br><span class="line">  var u = &apos;uuu&apos;</span><br><span class="line">&#125;</span><br><span class="line">test() // 每调用一次都会在内存中开辟一个环境, 结束之后就销毁(变量不在被引用)</span><br></pre></td></tr></table></figure><h3 id="每调用一次都会在内存中开辟一个环境-结束之后就销毁-变量不在被引用就会被回收"><a href="#每调用一次都会在内存中开辟一个环境-结束之后就销毁-变量不在被引用就会被回收" class="headerlink" title="每调用一次都会在内存中开辟一个环境, 结束之后就销毁(变量不在被引用就会被回收)"></a>每调用一次都会在内存中开辟一个环境, 结束之后就销毁(变量不在被引用就会被回收)</h3><h3 id="延长作用域链"><a href="#延长作用域链" class="headerlink" title="延长作用域链"></a>延长作用域链</h3><pre><code>来实现让X的值每次调用都加1</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">由于每次调用都会在内存中开辟新的地址, 最重要的是里面的变量没被引用, 所以在结束之后就会被销毁. 不能实现累加效果</span><br><span class="line">function add () &#123;</span><br><span class="line">  var x = 0</span><br><span class="line">  function sum() &#123;</span><br><span class="line">    console.log(++x)</span><br><span class="line">  &#125;</span><br><span class="line">  sum()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">add() //</span><br></pre></td></tr></table></figure><p>这样改造下 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">由add 返回的匿名函数一直在使用变量X,(利用闭包特性) 这样也就不会被销毁了, 在特定时候把add 设为 null 手动回收把 </span><br><span class="line">function add () &#123;</span><br><span class="line">  var x = 0</span><br><span class="line">  return function () &#123;</span><br><span class="line">    console.log(++x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var a = add()</span><br><span class="line">a()</span><br><span class="line">a()</span><br></pre></td></tr></table></figure><h3 id="什么是块级作用域"><a href="#什么是块级作用域" class="headerlink" title="什么是块级作用域?"></a>什么是块级作用域?</h3><p>在ES6之前是没有块级作用域的, 不像 let const 这样 {} 外部不可以访问到里面的函数和变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let b = 2</span><br><span class="line">  const c = 3</span><br><span class="line">&#125;</span><br><span class="line">console.log(b) // 不可以</span><br><span class="line">console.log(c) 不可以</span><br></pre></td></tr></table></figure><p>在之前 这些变量添加到当前执行环境 在这里是全局环境 也就是window  在for 循环中尤为重要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">if(true) &#123;</span><br><span class="line">  var b = 2</span><br><span class="line">  var c = 3</span><br><span class="line">&#125;</span><br><span class="line">console.log(b)</span><br><span class="line">console.log(c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(var i = 0; i &lt; 3; i++)&#123;</span><br><span class="line">  // 沿着作用域向上找 由于没有块级作用域 , 直接找到window 上的i</span><br><span class="line"></span><br><span class="line">  setTimeout(</span><br><span class="line">      function()&#123;</span><br><span class="line">        console.log(i)gvnd</span><br><span class="line">      &#125;</span><br><span class="line">    ,1000)</span><br><span class="line">&#125;</span><br><span class="line">console.log(i,&apos;win&apos;)</span><br><span class="line"></span><br><span class="line">// 在定时器了输出d对应的j</span><br><span class="line">for(var j = 0 ;j &lt; 3 ; j++) &#123;</span><br><span class="line">  // 没有 变量作用域, 有函数作用域 利用每创建一个函数就会创建一个内存空间</span><br><span class="line">  (function(n)&#123;</span><br><span class="line">    console.log(n)</span><br><span class="line">  &#125;)(j)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 应用</span><br><span class="line"></span><br><span class="line">let arr = [1,43,543,543,534,24,2,623,42,2132,35342,21,53,21,3,53,3,54,66]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function f(a,b) &#123;</span><br><span class="line">  return function (v) &#123;</span><br><span class="line">    return v &gt; a &amp;&amp; v&lt; b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(arr.filter(f(0,100))) </span><br><span class="line">console.log(arr.filter(f(100,600)))</span><br></pre></td></tr></table></figure><h3 id="关于this"><a href="#关于this" class="headerlink" title="关于this"></a>关于this</h3><p>在闭包中使用this对象可能会有一些问题, this 是在运行时基于环境绑定的. 在全局环境中 this 等于 window, 而当函数被当作某个对象的方法被调用时, this 等于那个对象, 不过匿名函数执行环境具有全局性, 因此this 对象通常指向window,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// var obj = &#123;</span><br><span class="line">//   name : &apos;obj1&apos;,</span><br><span class="line">//   getName () &#123;</span><br><span class="line">//     return this.name</span><br><span class="line">//   &#125;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// console.log(obj.getName()) //正常</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">  name : &apos;obj1&apos;,</span><br><span class="line">   getName:function () &#123;</span><br><span class="line">    return function ()&#123;</span><br><span class="line">      return this.name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(obj.getName()()) // window 匿名函数执行环境具有全局性</span><br></pre></td></tr></table></figure><p>怎么解决呢 </p><p>1 利用作用域链, 在函数里面定义 正确的 this 变量,<br>2 箭头函数 函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p><p>3 bind call apply </p><p>// console.log(obj.getName().bind(obj)())<br>// console.log(obj.getName().apply(obj))<br>// console.log(obj.getName().call(obj))</p><h3 id="造成内存泄漏"><a href="#造成内存泄漏" class="headerlink" title="造成内存泄漏"></a>造成内存泄漏</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 内存泄漏 </span><br><span class="line"></span><br><span class="line">function dom () &#123;</span><br><span class="line">  var ele = document.querySelectorAll(&apos;.test&apos;)</span><br><span class="line">  ele.onclick = function () &#123;</span><br><span class="line">    console.log(ele.id) // 循环引用</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 优化 </span><br><span class="line"></span><br><span class="line">function dom () &#123;</span><br><span class="line">  var ele = document.querySelectorAll(&apos;.test&apos;)</span><br><span class="line">  var id = ele.id</span><br><span class="line">  ele.onclick = function () &#123;</span><br><span class="line">    console.log(id) // 循环引用</span><br><span class="line">  &#125;</span><br><span class="line">  ele = null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>闭包的常见的使用形式</p><ul><li>返回一个函数</li><li>作为函数参数传递</li><li>回调函数</li><li>非典型闭包IIFE(立即执行函数表达式)</li></ul><p>闭包结合了局部变量和全局变量的优点。可以使变量不污染全局，但是又能对变量进行重用。但是，其实闭包也有有缺点的，它比起普通函数会占用更多的内存。</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>echart-bar</title>
      <link href="2020/06/19/echart-bar/"/>
      <url>2020/06/19/echart-bar/</url>
      
        <content type="html"><![CDATA[<h2 id="echart-柱状图带背景且柱状条顶端显示文字的效果"><a href="#echart-柱状图带背景且柱状条顶端显示文字的效果" class="headerlink" title="echart 柱状图带背景且柱状条顶端显示文字的效果"></a>echart 柱状图带背景且柱状条顶端显示文字的效果</h2><p><img src="http://ww1.sinaimg.cn/large/006q6S48gy1gfxv22ci91j30mf0j0aau.jpg" alt="企业微信截图_20200619201143.png"></p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>隐藏X轴，左侧文字用Y轴右侧用label标签 由于柱状图的背景颜色新增的数据， 所以在显示和hover的时候都要处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">yAxis: &#123;</span><br><span class="line">     // 左侧柱状图的Y轴</span><br><span class="line">     splitLine: &apos;none&apos;,</span><br><span class="line">     axisTick: &apos;none&apos;,</span><br><span class="line">     axisLine: &apos;none&apos;,</span><br><span class="line">     axisLabel: &#123;</span><br><span class="line">       verticalAlign: &apos;top&apos;,</span><br><span class="line">       align: &apos;center&apos;,</span><br><span class="line">       padding: [-5, 50, 10, 15],</span><br><span class="line">       textStyle: &#123;</span><br><span class="line">         color: &apos;#333&apos;,</span><br><span class="line">         fontSize: &apos;14&apos;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     data: [&apos;站三&apos;, &apos;里斯&apos;, &apos;王二&apos;]</span><br><span class="line">     // inverse: true</span><br><span class="line">   &#125;,</span><br><span class="line">   // 背景数据</span><br><span class="line">     // 背景</span><br><span class="line">     &#123;</span><br><span class="line">       barGap: &apos;-100%&apos;, // Make series be overlap</span><br><span class="line">       name: &apos;&apos;,</span><br><span class="line">       type: &apos;bar&apos;,</span><br><span class="line">       barWidth: 15,</span><br><span class="line">       silent: true, // 关键</span><br><span class="line">       itemStyle: &#123;</span><br><span class="line">         color: &apos;#F6F5FA&apos;,</span><br><span class="line">         barBorderRadius: 6</span><br><span class="line">       &#125;,</span><br><span class="line">       label: &#123; // 右侧文字</span><br><span class="line">         show: true,</span><br><span class="line">         // 通过formatter函数来返回想要的数据</span><br><span class="line">         formatter: function (params) &#123; // 关键</span><br><span class="line">           for (let i = 0; i &lt; data.length; i++) &#123;</span><br><span class="line">             if (params.dataIndex === i) &#123;</span><br><span class="line">               return data[i] + &apos;人&apos;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         position: &apos;right&apos;,</span><br><span class="line">         textStyle: &#123;</span><br><span class="line">           color: &apos;#333&apos;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       data: [654, 654, 654]</span><br><span class="line">     &#125;,</span><br><span class="line">     ]</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/006q6S48gy1gfxvn7wl00j30tu0e4mzu.jpg" alt="2018041500134284.png"></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖和节流</title>
      <link href="2019/10/16/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
      <url>2019/10/16/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h3 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h3><p>在进行窗口的resize、scroll，输入框内容校验等操作时，如果事件处理函数调用的频率无限制，会加重浏览器的负担，用户体验非常差</p><p>此时我们可以采用debounce（防抖）和throttle（节流）的方式来减少调用频率，同时又不影响实际效果。</p><p>那么什么时候用防抖什么时候用节流呢<br>借用github上一位大佬说的<br>就像一窝蜂的人去排队看演出，队伍很乱，看门的老大爷每隔1秒，让进一个人，这个叫throttle，如果来了这一窝蜂的人，老大爷一次演出只让进一个人，下次演出才让下一个人进，这个就叫debounce（如果用onresize类比，就是鼠标mousedown，然后疯狂缩放窗口，然后鼠标mouseup，这整个过程就是一次演出，这次演出只允许一个人看即只执行一次回调）。</p><p>函数节流不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数，而函数防抖只是在最后一次事件后才触发一次函数。 比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流技术来实现。</p><ul><li><p>按一个按钮发送 AJAX：给 click 加了 debounce 后就算用户不停地点这个按钮，也只会最终发送一次；如果是 throttle 就会间隔发送几次</p></li><li><p>监听滚动事件判断是否到页面底部自动加载更多：给 scroll 加了 debounce 后，只有用户停止滚动后，才会判断是否到了页面底部；如果是 throttle 的话，只要页面滚动就会间隔一段时间判断一次</p><h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4></li></ul><p>函数节流的原理挺简单的，一种方式是定时器。当我触发一个时间时，先setTimeOut让这个时间延迟一会执行，如果在这个时间间隔内又触发了事件。那我们就清除了原来的定时器。在setTimeout一个新的定时器延迟一会执行<br>函数节流的核心是，让一个函数不要执行得太频繁，减少一些过快的调用来节流。</p><h5 id="throttle-应用场景"><a href="#throttle-应用场景" class="headerlink" title="throttle 应用场景"></a>throttle 应用场景</h5><ul><li>DOM 元素的拖拽功能实现（mousemove）</li><li>计算鼠标移动的距离（mousemove）</li><li>搜索联想（keyup）</li><li>监听滚动事件判断是否到页面底部自动加载更多：给 scroll 加了 debounce 后，只有用户停止滚动后，才会判断是否到了页面底部；如果是 throttle 的话，只要页面滚动就会间隔一段时间判断一次</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author</span><br><span class="line"> * @description 节流第一次会触发 最后一次不会触发</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">export const _throttle = function(func, wait) &#123;</span><br><span class="line">  var prev = 0</span><br><span class="line">  return function() &#123;</span><br><span class="line">    var context = this</span><br><span class="line">    var args = arguments</span><br><span class="line">    var now = +new Date()</span><br><span class="line">    if (now - prev &gt; wait) &#123;</span><br><span class="line">      // 第一次肯定执行  把上一次 的 now 复制给 prev </span><br><span class="line">      // 第二次 生成新的时间戳 减去 上一次的 如果大于等于间隔事件就执行。反之不执行</span><br><span class="line">      // 重复 以上操作</span><br><span class="line"></span><br><span class="line">      func.apply(context, args)</span><br><span class="line">      prev = now</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/**</p><ul><li></li><li><p>@param {*} wait </p></li><li><p>@param {*} func</p></li><li><p>@description 第一次不会触发 最后一次会触发<br>prev = 0<br>now = 10<br>wait 2<br>第一次 prev 10<br>第二次 num 13 - 10 》 wait 成立 </p><pre><code>prev = 13 </code></pre><p>   … 循环下去</p></li><li><p>/</p><p>export const _throttle2 = function (func,wait) {<br> let context,timer,args;<br> return function () {<br>   context = this<br>   args = arguments<br>   if(!timer) { // 在这里区别</p><pre><code>timer = setTimeout(() =&gt; {  timer = null  func.apply(context,args)}, wait);</code></pre><p>   }<br> }<br>}<br>运行结果：<br><img src="http://ww1.sinaimg.cn/large/006xVFBigy1gafva1171lg30zw0f2jsn.gif" alt="throttle.gif"></p></li></ul><p>我们既想首次调用，也要最后触发。 把两者结合下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line">  * @description 两者结合</span><br><span class="line">  * 长按由于更新了时间不满足时间戳走了定时器？</span><br><span class="line">  prev = 0</span><br><span class="line">  now = 10 </span><br><span class="line">  wait 2 </span><br><span class="line">  第一次 prev 10 </span><br><span class="line">  2 秒钟 后是 12</span><br><span class="line">  在2秒内的连点不会触发执行</span><br><span class="line">  连点由于第一个条件不成立，一直走定时器的</span><br><span class="line">  ... 循环下去</span><br><span class="line">  * </span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line">export const throttle3 = function (func,wait) &#123;</span><br><span class="line">  let timer,context,prev = 0,now,args;</span><br><span class="line">  return function () &#123;</span><br><span class="line">    context = this</span><br><span class="line">    args = arguments</span><br><span class="line">    now = +new Date()</span><br><span class="line">    if(now - prev &gt; wait) &#123; </span><br><span class="line">    console.log(now - prev &gt; wait, &apos;now - prev&apos;)</span><br><span class="line">      // debugger</span><br><span class="line">      console.log(&apos;时间戳&apos;)</span><br><span class="line">      if(timer)&#123; // 结束后重新计算时间</span><br><span class="line">        clearTimeout(timer)</span><br><span class="line">        timer = null</span><br><span class="line">      &#125;</span><br><span class="line">      func.apply(context,args)</span><br><span class="line">      prev = now</span><br><span class="line">    &#125;else if(!timer)&#123;</span><br><span class="line">      console.log(&apos;定时器&apos;)</span><br><span class="line">    console.log(now - prev &gt; wait, &apos;now - prev&apos;)</span><br><span class="line">      // debugger</span><br><span class="line">      timer = setTimeout(() =&gt; &#123;</span><br><span class="line">        prev = +new Date() // 重置前一次触发的时间戳 </span><br><span class="line">        func.apply(context, args)</span><br><span class="line">        timer = null</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过选项来控制 头部调用还是尾部调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 完整版 的 节流 </span><br><span class="line"> * @param &#123;object&#125; option</span><br><span class="line"> * 如果您想禁用前沿呼叫，请传递&#123;leading：false&#125;，并且如果您要禁用后沿执行，请传递</span><br><span class="line"> &#123;trailing: false&#125;. </span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> export const _throttle4 = function (func,wait,option) &#123;</span><br><span class="line">   let context,timer,args,now,prev = 0;</span><br><span class="line">   if(!option) &#123;option = &#123;&#125;&#125;</span><br><span class="line">   return function () &#123;</span><br><span class="line">     context = this</span><br><span class="line">     now = +new Date()</span><br><span class="line">     args = arguments</span><br><span class="line">     console.log(option, &apos;option&apos;)</span><br><span class="line">     if(option.leading === false) &#123;</span><br><span class="line">      prev = now // 禁用首次执行</span><br><span class="line">     &#125;</span><br><span class="line">     if(now - prev &gt; wait) &#123;</span><br><span class="line">      if(timer) &#123;</span><br><span class="line">        clearTimeout(timer)</span><br><span class="line">        timer = null</span><br><span class="line">      &#125;</span><br><span class="line">      func.apply(context,args)</span><br><span class="line">      prev = now</span><br><span class="line">     &#125;else if(!timer &amp;&amp; option.trailing !== false) &#123;</span><br><span class="line">      timer = setTimeout(() =&gt; &#123;</span><br><span class="line">        timer = null</span><br><span class="line">        func.apply(context, args)</span><br><span class="line">        prev = +new Date()</span><br><span class="line">      &#125;, wait);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="http://ww1.sinaimg.cn/large/006xVFBigy1gafvesmoikg30zw0f276c.gif" alt="throttle_timer.gif"></p><p>input 中的节流的应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div&gt;</span><br><span class="line">    &lt;vx-input v-model=&quot;key&quot; ref=&quot;inp&quot; /&gt;</span><br><span class="line">    &lt;vx-button ref=&quot;btn&quot;&gt;搜索&lt;/vx-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">import &#123;_throttle3,_throttle,_throttle2,_throttle4&#125; from &apos;lib/utils&apos;</span><br><span class="line">mounted()&#123;</span><br><span class="line">  const inp = this.$refs.inp.$el</span><br><span class="line">  const btn = this.$refs.btn.$el</span><br><span class="line">  console.log(inp)</span><br><span class="line">  const that = this</span><br><span class="line">  const op = &#123;</span><br><span class="line">    leading:false, // 禁用首次执行</span><br><span class="line">    trailing:true</span><br><span class="line">  &#125;</span><br><span class="line">  // 节流 </span><br><span class="line">  inp.addEventListener(&apos;input&apos;,_throttle4(that.searchInp,2000,op)) </span><br><span class="line">  btn.addEventListener(&apos;click&apos;,_throttle(that.searchInp,1000)) </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>其实时间戳版和定时器版的节流函数的区别就是，时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。</p><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><p>防抖的原理就是：你尽管触发事件，但是我一定在事件触发 n 秒后才执行，如果你在一个事件触发的 n 秒内又触发了这个事件，那我就以新的事件的时间为准，n 秒后才执行，总之，就是要等你触发完事件 n 秒内不再触发事件，</p><h5 id="debounce-应用场景"><a href="#debounce-应用场景" class="headerlink" title="debounce 应用场景"></a>debounce 应用场景</h5><ul><li>每次 resize/scroll 触发统计事件</li><li>文本输入的验证（连续输入文字后发送 AJAX 请求进行验证，验证一次就好）</li></ul><p>当持续触发事件，一定时间内没有再触发事件，事件会重新执行一次<br>红宝书》给出了最简洁最经典的去抖代码（书中说是节流，实则为去抖），调用如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function debounce(method, context) &#123;</span><br><span class="line">  clearTimeout(method.tId);</span><br><span class="line">  method.tId = setTimeout(function() &#123;</span><br><span class="line">    method.call(context);</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function print() &#123;</span><br><span class="line">  console.log(&apos;hello world&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.onscroll = function() &#123;</span><br><span class="line">  debounce(print);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">在窗口内滚动一次，停止，1000ms 后，打印了 hello world，因为我们设置了一个 1000ms 延迟的定时器，细思非常巧妙。连续触发事件， 在结束后只触发一次</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">debounce(fn, delay) &#123;</span><br><span class="line">    let timer;</span><br><span class="line">    return function() &#123;</span><br><span class="line">      let that = this,</span><br><span class="line">        arg = arguments;</span><br><span class="line">      timer &amp;&amp; clearTimeout(timer);</span><br><span class="line">      timer = setTimeout(function() &#123;</span><br><span class="line">        fn.apply(that, arg);</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>/**</p><ul><li><p>@author </p></li><li><p>@description </p></li><li><p>/<br>export const _debounce1 = function (method,wait = 1000) {<br>let timer = null<br>let n = 0<br>return function () {<br>  let that = this<br>  let arg = arguments<br>  clearTimeout(timer)<br>  timer = setTimeout(function() {</p><pre><code>method.apply(that,arg)</code></pre><p>  },wait)<br>  console.log(n++)<br>}<br>}<br>/**</p></li><li><p>@description 第2版 支持立即执行的选项</p></li><li><p>对立即参数传递true 以使debounce触发前导函数而不是等待间隔的后沿。在防止意外双击“提交”按钮从而再次发射的情况下很有用。</p></li><li><p>/</p><p>export const _debounce2 = function (func,wait,immediate) {<br> let context,args,timer;<br> return function () {<br>   context = this<br>   args = arguments<br>   if (timer) clearTimeout(timer);<br>  // 如果immediate 为 true 先执行一次<br>  if(immediate) {</p><pre><code>var callNow = !timertimer = setTimeout(() =&gt; {  timer = null  }, wait);if(callNow) {  func.apply(context, args)}</code></pre><p>  }else {</p><pre><code>timer = setTimeout(() =&gt; {  func.apply(context,args)}, wait);</code></pre><p>  }<br> }<br>}<br>以上调用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 防抖 </span><br><span class="line">inp.addEventListener(&apos;input&apos;,debounce(that.searchInp,2000,true))</span><br></pre></td></tr></table></figure></li></ul><p>运行结果：<br><img src="http://ww1.sinaimg.cn/large/006xVFBigy1gafvzom10rg30zw0f2di3.gif" alt="debounce.gif"></p><p>可以看出来， 持续触发事件，会被清楚， 只有最后一次事件触发过后，等待指定延时时间后在执行的.</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios-cancelToken 总结</title>
      <link href="2019/10/08/axios-cancelToken-%E6%80%BB%E7%BB%93/"/>
      <url>2019/10/08/axios-cancelToken-%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>在vue 项目中我们通常会使用axios 来请求接口。在项目中遇到列表切换，防止快速多次点击列表导致请求频繁发送等等减轻服务器压力cancelToken取消请求就是一方案。 在ajax时代是用的abort()来取消接口请求的。 当然也有其他方法比如：节流、按钮置灰等等</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>看下官网的基本用法<br>[cancelToken 取消请求] (<a href="http://www.axios-js.com/zh-cn/docs/#%E5%8F%96%E6%B6%88" target="_blank" rel="noopener">http://www.axios-js.com/zh-cn/docs/#%E5%8F%96%E6%B6%88</a>)</p><h4 id="官网方法一"><a href="#官网方法一" class="headerlink" title="官网方法一"></a>官网方法一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var CancelToken = axios.CancelToken;</span><br><span class="line">var source = CancelToken.source();</span><br><span class="line"></span><br><span class="line">axios.get(&apos;/user/12345&apos;, &#123;</span><br><span class="line">  cancelToken: source.token  // 标记</span><br><span class="line">&#125;).catch(function(thrown) &#123;</span><br><span class="line">  if (axios.isCancel(thrown)) &#123; // 主动取消的在这可以捕捉到</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 处理错误</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 取消请求（message 参数是可选的）</span><br><span class="line">source.cancel(&apos;Operation canceled by the user.&apos;);</span><br><span class="line"></span><br><span class="line">// post 取消请求</span><br><span class="line">axios.post(&apos;/user/123/&apos;,&#123;</span><br><span class="line">    name:x</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    cancelToken:source.token // 是在第三个地方添加 </span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">    // 成功</span><br><span class="line">&#125;).catch(err =&gt; &#123;</span><br><span class="line">    if(axios.isCancel(err))&#123;</span><br><span class="line">        // 主动取消</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        //其他错误</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="官网方法-二-可以通过传递一个-executor-函数到-CancelToken-的构造函数来创建-cancel-token："><a href="#官网方法-二-可以通过传递一个-executor-函数到-CancelToken-的构造函数来创建-cancel-token：" class="headerlink" title="官网方法 二 可以通过传递一个 executor 函数到 CancelToken 的构造函数来创建 cancel token："></a>官网方法 二 可以通过传递一个 executor 函数到 CancelToken 的构造函数来创建 cancel token：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const ConcelToken = axios.CancelToken</span><br><span class="line">let cancel</span><br><span class="line">axios.get(&apos;/user/12345&apos;, &#123;</span><br><span class="line">  cancelToken: new CancelToken(function executor(c) &#123;</span><br><span class="line">    // executor 函数接收一个 cancel 函数作为参数</span><br><span class="line">    cancel = c;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// cancel the request</span><br><span class="line">cancel();</span><br></pre></td></tr></table></figure><p>##看下在项目中如何使用</p><h3 id="防止重复请求"><a href="#防止重复请求" class="headerlink" title="防止重复请求"></a>防止重复请求</h3><p>在做项目时会遇到用户连点按钮的情况造成服务器压力或是未知异常等， 为了避免这种情况可以给用户一个友好的提示，多次请求只有最后一次有效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sendRequest() &#123;</span><br><span class="line">       let that = this;</span><br><span class="line">       if(this.cancelList)&#123;</span><br><span class="line">           this.cancelList.cancel(&apos;我取消啦&apos;)</span><br><span class="line">       &#125;</span><br><span class="line">       this.cancelList = axios.CancelToken.source();</span><br><span class="line">       axios.get(&apos;http://jsonplaceholder.typicode.com/comments&apos;, &#123;</span><br><span class="line">           cancelToken:that.cancelList.token</span><br><span class="line">           &#125;)</span><br><span class="line">       .then(res =&gt; &#123;</span><br><span class="line">           // 你的逻辑</span><br><span class="line">           this.list = res</span><br><span class="line">       &#125;)</span><br><span class="line">       .catch(thrown =&gt; &#123;</span><br><span class="line">           if (axios.isCancel(thrown)) &#123;  // 如果调用了cancel方法，那么这里的res就是cancel传入的信息</span><br><span class="line">               alert(&apos;请不要点击过于频繁&apos;)</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               // 处理错误</span><br><span class="line">               alert(&apos;接收400 401 等其他错误&apos;)</span><br><span class="line">               console.log(&apos;处理错误&apos;, thrown.message);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>我们可以把他封装起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const clearHttpPendingList = (config) =&gt; &#123;</span><br><span class="line">Vue.prototype.pending.forEach((item, index) =&gt; &#123;</span><br><span class="line">if (config.url === item.url) &#123;</span><br><span class="line">item.c();</span><br><span class="line">Vue.prototype.pending.splice(index, 1);</span><br><span class="line">&#125;</span><br><span class="line">if (config.url.includes(&apos;http://jsonplaceholder.typicode.com/comments&apos;) &amp;&amp; localStorage.getItem(&apos;comments&apos;)) &#123;</span><br><span class="line">// 不同页面相同的接口</span><br><span class="line">Vue.prototype.pending.splice(index, 1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">(config) =&gt; &#123;</span><br><span class="line">clearHttpPendingList(config);</span><br><span class="line">config.cancelToken = new cancelToken(function executor(c) &#123;</span><br><span class="line">Vue.prototype.pending.push(&#123; url: config.url, c: c &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">// 发送请求之前做的</span><br><span class="line">return config;</span><br><span class="line">&#125;,</span><br><span class="line">(err) =&gt; &#123;</span><br><span class="line">// 请求错误</span><br><span class="line">return Promise.reject(err);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>连续点后它的网络请求<br><img src="http://ww1.sinaimg.cn/large/006xVFBigy1g7rz0p0rhfj30n50cu3yu.jpg" alt="微信截图_20191009151456.png"></p></blockquote><h3 id="取消上一个页面的pedding请求"><a href="#取消上一个页面的pedding请求" class="headerlink" title="取消上一个页面的pedding请求"></a>取消上一个页面的pedding请求</h3><p>优化性能， 跳转之前取消 正在请求的接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.pending = []; // //声明一个数组用于存储每个ajax请求的取消函数和ajax标识 请求的缓存</span><br><span class="line"></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">(config) =&gt; &#123;</span><br><span class="line">clearHttpPendingList(config);</span><br><span class="line">config.cancelToken = new cancelToken(function executor(c) &#123;</span><br><span class="line">Vue.prototype.pending.push(&#123; url: config.url, c: c &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">// 发送请求之前做的</span><br><span class="line">return config;</span><br><span class="line">&#125;,</span><br><span class="line">(err) =&gt; &#123;</span><br><span class="line">// 请求错误</span><br><span class="line">return Promise.reject(err);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">router.afterEach((to, from) =&gt; &#123;</span><br><span class="line">Vue.prototype.pending.forEach((item) =&gt; &#123;</span><br><span class="line">item.c();</span><br><span class="line">&#125;);</span><br><span class="line">Vue.prototype.pending = [];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个接口处于pedding状态<br><img src="http://ww1.sinaimg.cn/large/006xVFBigy1g80005p77aj30md01dglg.jpg" alt="微信图片_20191016135317.png"><br>跳转到其他页面取消<br><img src="http://ww1.sinaimg.cn/large/006xVFBigy1g8001as3vaj30hj0510sv.jpg" alt="微信截图_20191016135422.png"></p><h3 id="相同的接口不再调用的应用"><a href="#相同的接口不再调用的应用" class="headerlink" title="相同的接口不再调用的应用-"></a>相同的接口不再调用的应用-</h3><p>项目中有的接口在多个页面调用， 这个接口返回的数据不会轻易改变。 这个时候我们就会用到这个canceltoken和页面缓存。比如这个重复接口是A， 思路是 先调用A接口然后把接口内容存到本地， 这样在任何页面调用A接口的时候就直接取消掉了， </p><p>看下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.request.use(</span><br><span class="line">(config) =&gt; &#123;</span><br><span class="line">clearHttpPendingList(config);</span><br><span class="line">config.cancelToken = new cancelToken(function executor(c) &#123;</span><br><span class="line">Vue.prototype.pending.push(&#123; url: config.url, c: c &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">// 发送请求之前做的</span><br><span class="line">return config;</span><br><span class="line">&#125;,</span><br><span class="line">(err) =&gt; &#123;</span><br><span class="line">// 请求错误</span><br><span class="line">return Promise.reject(err);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">(response) =&gt; &#123;</span><br><span class="line">if (response.config.url.includes(&apos;http://jsonplaceholder.typicode.com/comments&apos;)) &#123;</span><br><span class="line">localStorage.setItem(&apos;comments&apos;, JSON.stringify(response.data));</span><br><span class="line">&#125; // comments 要缓存的接口</span><br><span class="line">clearHttpPendingList(response.config); //在一个ajax响应后再执行一下取消操作，把已经完成的请求从pending中移除</span><br><span class="line"></span><br><span class="line">// 响应成功的数据</span><br><span class="line">return response;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const clearHttpPendingList = (config) =&gt; &#123;</span><br><span class="line">Vue.prototype.pending.forEach((item, index) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">if (config.url.includes(&apos;http://jsonplaceholder.typicode.com/comments&apos;) &amp;&amp; localStorage.getItem(&apos;comments&apos;)) &#123;</span><br><span class="line">// 不同页面相同的接口</span><br><span class="line">            item.c();</span><br><span class="line">Vue.prototype.pending.splice(index, 1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前言</title>
      <link href="2019/09/22/%E5%89%8D%E8%A8%80/"/>
      <url>2019/09/22/%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="关于前端-算法"><a href="#关于前端-算法" class="headerlink" title="关于前端-算法"></a>关于前端-算法</h2><p>先说下自己不是科班出身 ，在工作的过程中深深的体会到算法的重要性，如果写的很差会导致程序运行很慢。。，</p><h2 id="如何学习算法"><a href="#如何学习算法" class="headerlink" title="如何学习算法"></a>如何学习算法</h2><p>多看、多练、多思考。 </p><ul><li>多看 推荐《算法图解》《啊哈！算法》 新手</li><li>多练 leetCoce 、 牛客 <a href="https://leetcode-cn.com" target="_blank" rel="noopener">https://leetcode-cn.com</a></li><li>多思考 养成总结的习惯，懂得变通。养成良好的思维方式</li></ul><h2 id="关于更新"><a href="#关于更新" class="headerlink" title="关于更新"></a>关于更新</h2><p>因为没太多时间更新在加上自己也处于学习阶段， 更新会比较慢。 希望自己能写出健壮、快速、精简的代码。共勉</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>singleNumber</title>
      <link href="2019/09/22/singleNumber/"/>
      <url>2019/09/22/singleNumber/</url>
      
        <content type="html"><![CDATA[<h2 id="只出现一次的数字"><a href="#只出现一次的数字" class="headerlink" title="只出现一次的数字"></a>只出现一次的数字</h2><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。<br>说明：</p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><p>示例 1:</p><p>输入: [2,2,1]<br>输出: 1<br>示例 2:</p><p>输入: [4,1,2,1,2]<br>输出: 4</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/single-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/single-number</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="解法1-应该是最慢的方法。。。违背了题意"><a href="#解法1-应该是最慢的方法。。。违背了题意" class="headerlink" title="解法1 应该是最慢的方法。。。违背了题意"></a>解法1 应该是最慢的方法。。。违背了题意</h3><p>刚看到这个题的时候我以为是用对象就出结果了，尴尬。然后仔细想了下这不是消消乐那种嘛，虽然不怎么玩，但是想起来简单做起来难， 我第一次的解法确实最繁琐的。<br>解法是利用了很多外部空间是数组加对象</p><ul><li>利用数组判断出每个数字的循环次数</li><li>再用对象找出最小的那个。。。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;number[]&#125; nums</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">var singleNumber = function(nums) &#123;</span><br><span class="line">if (nums.length &lt; 2) &#123;</span><br><span class="line">return nums[0];</span><br><span class="line">&#125;</span><br><span class="line">let map = &#123;&#125;;</span><br><span class="line">let n = 1;</span><br><span class="line">let res = &apos;&apos;;</span><br><span class="line">for (let i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">n = 1;</span><br><span class="line">for (let j = 0; j &lt; nums.length; j++) &#123;</span><br><span class="line">if (nums[i] === nums[j]) &#123;</span><br><span class="line">map[nums[i]] = n++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(map, &apos;map&apos;);</span><br><span class="line">let min = 1;</span><br><span class="line">for (let key in map) &#123;</span><br><span class="line">if (map[key] &lt; min) &#123;</span><br><span class="line">min = map[key];</span><br><span class="line">&#125;</span><br><span class="line">console.log(min, &apos;min&apos;);</span><br><span class="line">if (map[key] === min) &#123;</span><br><span class="line">res = key;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(res);</span><br><span class="line">return res;</span><br><span class="line">&#125;;</span><br><span class="line">let t = [ 2, 1, 2 ];</span><br><span class="line">let t1 = [ 4, 1, 2, 1, 2 ];</span><br><span class="line">singleNumber(t);</span><br></pre></td></tr></table></figure></li></ul><p>然后运行时长看图：<br><img src="http://ww1.sinaimg.cn/large/006xVFBigy1g78gkzf509j30as0a8aa7.jpg" alt="1.png"></p><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h3><ul><li>新建对象</li><li>相同的就删除</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var singleNumber1 = function(nums) &#123;</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">for (let i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">obj[nums[i]] = !obj[nums[i]];</span><br><span class="line">if (!obj[nums[i]]) &#123;</span><br><span class="line">delete obj[nums[i]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(obj);</span><br><span class="line">return Object.keys(obj)[0];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let t = [ 2, 1, 2 ];</span><br><span class="line">let t1 = [ 4, 1, 2, 1, 2 ];</span><br><span class="line">let t2 = [ 1, 3, 1, -1, 3 ];</span><br><span class="line">singleNumber1(t1);</span><br></pre></td></tr></table></figure><p>运行图解-第一次用这个软件<br><img src="http://ww1.sinaimg.cn/large/006xVFBigy1g79oh84oi6j30n2158q6d.jpg" alt="l1.png"></p><p>运行时长<br><img src="http://ww1.sinaimg.cn/large/006xVFBigy1g79ojg56dwj309r06e3yj.jpg" alt="222.png"></p><h2 id="一些大神的解法-："><a href="#一些大神的解法-：" class="headerlink" title="一些大神的解法 ："></a>一些大神的解法 ：</h2><h3 id="解法3"><a href="#解法3" class="headerlink" title="解法3"></a>解法3</h3><ul><li>因为 除了某个元素只出现一次以外，其余每个元素均出现两次， 所以我们可以先排序，在以2为基数循环  </li><li>第一步先排序  冒号排序972ms…, 自带的排序88ms</li><li>以2为基数每次循环</li><li>因为是排好序的又是相同的是两两出现当前的不等于后一个就是唯一的，如果没有找到不相等的就返回最后一个</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var singleNumber2 = function(nums) &#123;</span><br><span class="line">if (nums.length &lt; 2) &#123;</span><br><span class="line">return nums[0];</span><br><span class="line">&#125;</span><br><span class="line">let tmp = 0;</span><br><span class="line">// 排序</span><br><span class="line">for (let i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">for (let j = 0; j &lt; nums.length - i - 1; j++) &#123;</span><br><span class="line">if (nums[j] &gt; nums[j + 1]) &#123;</span><br><span class="line">tmp = nums[j];</span><br><span class="line">nums[j] = nums[j + 1];</span><br><span class="line">nums[j + 1] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for (let i = 0; i &lt; nums.length; i += 2) &#123;</span><br><span class="line">if (nums[i] != nums[i + 1]) &#123;</span><br><span class="line">return nums[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return nums[nums.length - 1];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行时长：<br><img src="http://ww1.sinaimg.cn/large/006xVFBigy1g7bvvn7ft2j30bm09r3yo.jpg" alt="微信截图_20190925171519.png"></p><h3 id="解法三-异或运算"><a href="#解法三-异或运算" class="headerlink" title="解法三 异或运算"></a>解法三 异或运算</h3><p>先来看下异或运算的描述</p><ul><li>任何数与0异或都不会改变他的数值 x ^ 0 = x</li><li>任何数与自身异都为0 x^x = 0</li></ul><p>正好利用以上两点完美的解决。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var singleNumber = function(nums) &#123;</span><br><span class="line">let num = 0;</span><br><span class="line">for (let i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">num = num ^ nums[i];</span><br><span class="line">&#125;</span><br><span class="line">console.log(num);</span><br><span class="line">return num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行时长</p><p><img src="http://ww1.sinaimg.cn/large/006xVFBigy1g7dxgzjpi2j30ap08oaa6.jpg" alt="2.png"></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first</title>
      <link href="2019/09/18/HelloHexo/"/>
      <url>2019/09/18/HelloHexo/</url>
      
        <content type="html"><![CDATA[<h2 id="第一篇文章-Hello-hexo"><a href="#第一篇文章-Hello-hexo" class="headerlink" title="第一篇文章 Hello hexo"></a>第一篇文章 Hello hexo</h2><h3 id="发布流程"><a href="#发布流程" class="headerlink" title="发布流程"></a>发布流程</h3><h4 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;hello-world&quot;</span><br></pre></td></tr></table></figure><h4 id="创建tags"><a href="#创建tags" class="headerlink" title="创建tags"></a>创建tags</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>参考链接 <a href="https://www.jianshu.com/p/e17711e44e00" target="_blank" rel="noopener">https://www.jianshu.com/p/e17711e44e00</a><br><a href="https://www.jianshu.com/p/e17711e44e00" target="_blank" rel="noopener">Hexo使用攻略-添加分类及标签</a></p><h5 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h4 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
